initSidebarItems({"enum":[["Error",""]],"struct":[["AircraftData","The make, model, and type of an aircraft."],["AirportData","An airport."],["BagDescriptor","Information about an item of baggage."],["CarrierData","Information about a carrier (ie. an airline, bus line, railroad, etc) that might be useful to display to an end-user."],["CityData","Information about a city that might be useful to an end-user; typically the city of an airport."],["Data","Detailed information about components found in the solutions of this response, including a trip's airport, city, taxes, airline, and aircraft."],["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["FareInfo","Complete information about a fare used in the solution to a low-fare search query. In the airline industry a fare is a price an airline charges for one-way travel between two points. A fare typically contains a carrier code, two city codes, a price, and a fare basis. (A fare basis is a one-to-eight character alphanumeric code used to identify a fare.)"],["FlightInfo","A flight is a sequence of legs with the same airline carrier and flight number. (A leg is the smallest unit of travel, in the case of a flight a takeoff immediately followed by a landing at two set points on a particular carrier with a particular flight number.) The naive view is that a flight is scheduled travel of an aircraft between two points, with possibly intermediate stops, but carriers will frequently list flights that require a change of aircraft between legs."],["FreeBaggageAllowance","Information about free baggage allowed on one segment of a trip."],["LegInfo","Information about a leg. (A leg is the smallest unit of travel, in the case of a flight a takeoff immediately followed by a landing at two set points on a particular carrier with a particular flight number.)"],["MethodInfo","Contains information about an API request."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. **Note**: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["PassengerCounts","The number and type of passengers. Unfortunately the definition of an infant, child, adult, and senior citizen varies across carriers and reservation systems."],["PricingInfo","The price of one or more travel segments. The currency used to purchase tickets is usually determined by the sale/ticketing city or the sale/ticketing country, unless none are specified, in which case it defaults to that of the journey origin country."],["QPXExpress","Central instance to access all QPXExpress related resource activities"],["SegmentInfo","Details of a segment of a flight; a segment is one or more consecutive legs on the same flight. For example a hypothetical flight ZZ001, from DFW to OGG, would have one segment with two legs: DFW to HNL (leg 1), HNL to OGG (leg 2), and DFW to OGG (legs 1 and 2)."],["SegmentPricing","The price of this segment."],["SliceInfo","Information about a slice. A slice represents a traveller's intent, the portion of a low-fare search corresponding to a traveler's request to get between two points. One-way journeys are generally expressed using 1 slice, round-trips using 2. For example, if a traveler specifies the following trip in a user interface: | Origin | Destination | Departure Date | | BOS | LAX | March 10, 2007 | | LAX | SYD | March 17, 2007 | | SYD | BOS | March 22, 2007 | then this is a three slice trip."],["SliceInput","Criteria a desired slice must satisfy."],["TaxData","Tax data."],["TaxInfo","Tax information."],["TimeOfDayRange","Two times in a single day defining a time range."],["TripMethods","A builder providing access to all methods supported on *trip* resources. It is not used directly, but through the `QPXExpress` hub."],["TripOption","Trip information."],["TripOptionsRequest","A QPX Express search request, which will yield one or more solutions."],["TripOptionsResponse","A QPX Express search response."],["TripSearchCall","Returns a list of flights."],["TripsSearchRequest","A QPX Express search request."],["TripsSearchResponse","A QPX Express search response."]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a *parts* string"]],"type":[["Result","A universal result type used as return for all calls."]]});